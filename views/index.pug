extends layout

block content
	div(class="container")
		div(class="row")
			div(class="col-8")
				h1 Stock Exchange Client
			div(class="col-4")
				button(type="button" class="btn btn-danger btn-block" onclick="logOut()") Log Out
		div(class="row")
			div(class="col")
				p Welcome to a simple example client for the Linux based Stock Exchange.
				p The graph below shows the historic data for the commodity. When a trade is matched, the value of the executed match is recorded at the time of the match. The graph plots the OCHL chart for the data, meaning it will show the open, close, high and low value of the commodity in the selected time frame.
				p If you place a few buy and sell offers, and ensure some of them will match, you will see the graph update with the new data. Note, that the close indicator will be the last trade executed for the currect time block.
				p There will most likely not be any trades in the recent history, and since it is very difficuilt to generate sample data without knowing when the sameple will be accessed, you will need to do a few trades in order to generate a reasonable chart.
		div(class="row")
			div(class="col")
				h3 Trade
		div(class="row")
			div(class="graph" id="graph")
		form(id="tradeForm")
			div(class="row row-top-buffer")
				div(class="col")
					label Commodity
					select(id="commodity" class="form-control" onchange="switchCommodity()")
						option(value="0") Gold
						option(value="1") Silver
						option(value="2") Oil
			div(class="row row-top-buffer")
				div(class="col")
					label Price
					input(type="number" step="0.01" class="form-control" id="tradePrice")
				div(class="col")
					label Quantity
					input(type="number" step="1" class="form-control" id="tradeQuantity")
			div(class="row row-top-buffer")
				div(class="col")
					button(type="button" class="btn btn-danger btn-block" onclick="apiBuy()" id="buyButton") Place Buy Offer
				div(class="col")
					button(type="button" class="btn btn-danger btn-block" onclick="apiSell()" id="sellButton") Place Sell Offer
				//div(class="col")
					//button(type="button" class="btn btn-info btn-block" onclick="apiGetGraphData()") Test
		div(class="row row-top-buffer")
			div(class="col")
				h3 Exchange History
		div(class="row")
			div(class="col")
				ul(class="list-group row-top-buffer")
					li(class="list-group-item list-group-item-primary")
						div(class="row")
							div(class="col") Exchange Date
							div(class="col") Price
							div(class="col") Quantity
					div(id="exchangesList")


	script.
		// Check if logged in
		let userToken = localStorage.getItem("userToken");
		if(userToken == null) {
			window.location = "http://stockexchange.ml:60000/user";
		}
		apiGetGraphData(false);
		apiGetIndividual();
		window.setInterval(function(){
		  	apiGetGraphData(true);
			apiGetIndividual();
		}, 5000);

		function tempDisableBuy() {
			let initialVal = document.getElementById("buyButton").innerHTML;
			document.getElementById("buyButton").disabled = true;
			document.getElementById("buyButton").innerHTML = "Placed...";
			setTimeout(function () {
				document.getElementById("buyButton").disabled = false;
				document.getElementById("buyButton").innerHTML = initialVal;
			}, 2000);
		}

		function tempDisableSell() {
			let initialVal = document.getElementById("sellButton").innerHTML;
			document.getElementById("sellButton").disabled = true;
			document.getElementById("sellButton").innerHTML = "Placed...";
			setTimeout(function () {
				document.getElementById("sellButton").disabled = false;
				document.getElementById("sellButton").innerHTML = initialVal;
			}, 2000);
		}

		var graphData = null;

		function draw(values) {
			graphData = values
			let graph = document.getElementById('graph');
			Plotly.purge(graph);
			//values = {
			//	x: ['2017-01-04', '2017-01-05', '2017-01-06', '2017-01-07', '2017-01-08'],
			//	open: [1, 2, 2.7, 4.5, 7],
			//	close: [1.6, 2.4, 4, 4.1, 3],
			//	high: [2.1, 2, 4, 5, 11],
			//	low: [0.4, 2, 4, 3.2, 1.1],
			//	increasing: {line: {color: '#2d7fc6'}},
			//	decreasing: {line: {color: '#ef4545'}},
			//	type: 'ohlc'
			//};
			graphData.increasing = {line: {color: '#2d7fc6'}};
			graphData.decreasing = {line: {color: '#ef4545'}};
			graphData.type = 'ohlc';
			Plotly.plot( graph,
				[graphData],
				{
					margin: {
						r: 0,
						t: 0,
						b: 0,
						l: 0
					},
					showlegend: false
				}
			);
		}

		function updateDraw(values) {
			let graph = document.getElementById('graph');
			//Plotly.purge(graph);
			//values = {
			//	x: ['2017-01-04', '2017-01-05', '2017-01-06', '2017-01-07', '2017-01-08'],
			//	open: [1, 2, 2.7, 4.5, 7],
			//	close: [1.6, 2.4, 4, 4.1, 3],
			//	high: [2.1, 2, 4, 5, 11],
			//	low: [0.4, 2, 4, 3.2, 1.1],
			//	increasing: {line: {color: '#2d7fc6'}},
			//	decreasing: {line: {color: '#ef4545'}},
			//	type: 'ohlc'
			//};
			values.increasing = {line: {color: '#2d7fc6'}};
			values.decreasing = {line: {color: '#ef4545'}};
			values.type = 'ohlc';
			graphData = values;
			console.log("Update");
			Plotly.redraw( graph)
		}

		function logOut() {
			localStorage.clear();
			window.location = "http://stockexchange.ml:60000/user";
		}

		function switchCommodity() {
			apiGetGraphData();
			apiGetIndividual();
		}

		function apiGetIndividual() {
			let query = "http://stockexchange.ml:59999/api/individuals/" + localStorage.getItem("userId");
			fetch(query, {mode: 'cors'}).then(function(response) {
				response.text().then(function(data) {
					let values = JSON.parse(data);

					let total = "<li class='list-group-item list-group-item-action'>";
					for (var i = 0; i < values.exchanges.length; i++) {
						if(values.exchanges[i].commodityId != $('#commodity').val())
							continue;
						total += "<div class='row'>";
						total += "<div class='col'>" + new Date(values.exchanges[i].date) + "</div>";
						total += "<div class='col'>" + values.exchanges[i].price + "</div>";
						total += "<div class='col'>" + values.exchanges[i].quantity + "</div>";
						total += "</div>";
					}
					total += "</li>";

					document.getElementById("exchangesList").innerHTML = total;

				});
			});
		}

		function apiGetGraphData(asUpdate) {
			let comid = $('#commodity').val();
			console.log("Drawing " + comid);
			fetch("http://stockexchange.ml:59999/api/data/commodities/" + comid + "/30", {mode: 'cors'}).then(function(response) {
				response.text().then(function(data) {
					let values = JSON.parse(data);
					if(asUpdate) {
						draw(values);
					} else {
						draw(values);
					}
				});
			});
		}
		function apiBuy() {
			console.log("Buying");
			let comid = $('#commodity').val();
			let price = $('#tradePrice').val();
			let qty = $('#tradeQuantity').val();
			fetch("http://stockexchange.ml:59999/api/buy/" + comid + "/" + price + "/" + qty, {
				headers: {
			      'apitoken': localStorage.getItem("userToken")
			  },
			  mode: 'cors'
			}).then(function(response) {
				response.text().then(function(data) {
					console.log(data);
					tempDisableBuy();
				});
			});
		}
		function apiSell() {
			console.log("Selling");
			let comid = $('#commodity').val();
			let price = $('#tradePrice').val();
			let qty = $('#tradeQuantity').val();
			fetch("http://stockexchange.ml:59999/api/sell/" + comid + "/" + price + "/" + qty, {
				headers: {
			      'apitoken': localStorage.getItem("userToken")
			  },
			  mode: 'cors'
			}).then(function(response) {
				response.text().then(function(data) {
					console.log(data);
					tempDisableSell();
				});
			});
		}
